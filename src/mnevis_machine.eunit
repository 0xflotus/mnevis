-ifdef(TEST).

% Machine behaviour:

init_mnesia_table() ->
    mnesia:delete_schema([node()]),
    ok = mnesia:start(),
    mnesia:create_table(committed_transaction, []),
    mnesia:clear_table(committed_transaction).

% commit:
%     fail if locker is not in the current term

init_state() ->
    #state{locker_status = up, locker = {1, self()}}.

valid_transaction(State) ->
    {1, State#state.locker}.

invalid_transaction(State = #state{locker = {Term, Pid}}) ->
    {1, {Term + 1, Pid}}.

commit_valid_locker_test() ->
    init_mnesia_table(),
    InitState = init_state(),
    Transaction = valid_transaction(InitState),
    {InitState, {ok, ok}, [{release_cursor, 1, InitState}]} =
        mnevis_machine:apply(#{index => 1}, {commit, Transaction, {[], [], []}}, InitState),
    %% Transaction is already committed
    {InitState, {ok, ok}, []} =
        mnevis_machine:apply(#{index => 1}, {commit, Transaction, {[], [], []}}, InitState),
    %% Locker term is different.
    InvalidTransaction = invalid_transaction(InitState),
    {InitState, {error, {aborted, wrong_locker_term}}, []} =
        mnevis_machine:apply(#{index => 1}, {commit, InvalidTransaction, {[], [], []}}, InitState).

commit_write_test() ->
    init_mnesia_table(),
    mnesia:create_table(foo, []),
    %% To delete
    mnesia:dirty_write({foo, to_delete, val}),
    %% To delete during delete_object
    mnesia:dirty_write({foo, to_delete_object, val}),
    %% To skip during delete_object
    mnesia:dirty_write({foo, to_not_delete_object, not_val}),
    %% To reqrite during write
    mnesia:dirty_write({foo, to_rewrite, val}),
    Source = self(),
    InitState = init_state(),
    Transaction = valid_transaction(InitState),

    %% Writes are of {Table, Record, LockKind} format
    Writes = [{foo, {foo, to_rewrite, other_val}, write},
              {foo, {foo, to_write, val}, write}],
    %% Deletes are of {Table, Key, LockKind} format
    Deletes = [{foo, bar, write},
               {foo, to_delete, write}],
    DeletesObject = [{foo, {foo, to_delete_object, val}, write},
                     {foo, {foo, to_not_delete_object, val}, write}],
    Expected = lists:usort([{foo, to_rewrite, other_val},
                            {foo, to_write, val},
                            {foo, to_not_delete_object, not_val}]),
    {InitState, {ok, ok}, _} =
        mnevis_machine:apply(#{index => 1}, {commit, Transaction, {Writes, Deletes, DeletesObject}}, InitState),
    Table = lists:usort(ets:tab2list(foo)),
    Expected = Table.

% read ops:
%     fail if wrong transaction term
%     skip if transaction is committed
%     return read data

read_wrong_locker_transaction_error_test() ->
    wrong_locker_transaction_error(read, {table, foo}).

read_aborted_transaction_error_test() ->
    aborted_transaction_error(read, {unknown_table, foo}, {no_exists,[unknown_table, foo]}).

read_committed_transaction_error_test() ->
    committed_transaction_error(read, {table, foo}).

%% Index read

index_read_wrong_locker_transaction_error_test() ->
    wrong_locker_transaction_error(index_read, {table, foo, 3}).

index_read_aborted_transaction_error_test() ->
    aborted_transaction_error(index_read, {unknown_table, foo, 3}, {no_exists,[unknown_table, foo, 3]}).

index_read_committed_transaction_error_test() ->
    committed_transaction_error(index_read, {table, foo, 3}).

%% Match object

match_object_wrong_locker_transaction_error_test() ->
    wrong_locker_transaction_error(match_object, {table, foo}).

match_object_aborted_transaction_error_test() ->
    aborted_transaction_error(match_object, {unknown_table, foo}, {bad_type,unknown_table,foo}).

match_object_committed_transaction_error_test() ->
    committed_transaction_error(match_object, {table, foo}).

%% Index match object

index_match_object_wrong_locker_transaction_error_test() ->
    wrong_locker_transaction_error(index_match_object, {table, foo, 3}).

index_match_object_aborted_transaction_error_test() ->
    aborted_transaction_error(index_match_object, {unknown_table, foo, 3}, {bad_type,unknown_table,foo}).

index_match_object_committed_transaction_error_test() ->
    committed_transaction_error(index_match_object, {table, foo, 3}).

%% All keys

all_keys_wrong_locker_transaction_error_test() ->
    wrong_locker_transaction_error(all_keys, table).

all_keys_aborted_transaction_error_test() ->
    aborted_transaction_error(all_keys, unknown_table, {no_exists,unknown_table}).

all_keys_committed_transaction_error_test() ->
    committed_transaction_error(all_keys, table).

%% First

first_wrong_locker_transaction_error_test() ->
    wrong_locker_transaction_error(first, table).

first_aborted_transaction_error_test() ->
    aborted_transaction_error(first, unknown_table, {no_exists,[unknown_table]}).

first_committed_transaction_error_test() ->
    committed_transaction_error(first, table).

%% Last

last_wrong_locker_transaction_error_test() ->
    wrong_locker_transaction_error(last, table).

last_aborted_transaction_error_test() ->
    aborted_transaction_error(last, unknown_table, {no_exists,[unknown_table]}).

last_committed_transaction_error_test() ->
    committed_transaction_error(last, table).

%% Prev

prev_wrong_locker_transaction_error_test() ->
    wrong_locker_transaction_error(prev, {table, foo}).

prev_aborted_transaction_error_test() ->
    aborted_transaction_error(prev, {unknown_table, foo}, {no_exists,[unknown_table, foo]}).

prev_committed_transaction_error_test() ->
    committed_transaction_error(prev, {table, foo}).

%% Next

next_wrong_locker_transaction_error_test() ->
    wrong_locker_transaction_error(next, {table, foo}).

next_aborted_transaction_error_test() ->
    aborted_transaction_error(next, {unknown_table, foo}, {no_exists,[unknown_table, foo]}).

next_committed_transaction_error_test() ->
    committed_transaction_error(next, {table, foo}).


wrong_locker_transaction_error(Command, Args) ->
    init_mnesia_table(),
    InitState = init_state(),
    InvalidTransaction = invalid_transaction(InitState),
    {InitState, {error, {aborted, wrong_locker_term}}, []} =
        mnevis_machine:apply(none, {Command, InvalidTransaction, Args}, InitState).

aborted_transaction_error(Command, Args, Err) ->
    init_mnesia_table(),
    InitState = init_state(),
    Transaction = valid_transaction(InitState),
    {InitState, {error, {aborted, Err}}, []} =
        mnevis_machine:apply(none, {Command, Transaction, Args}, InitState).

committed_transaction_error(Command, Args) ->
    init_mnesia_table(),
    InitState = init_state(),
    Transaction = valid_transaction(InitState),
    {InitState, {ok, _}, _} =
        mnevis_machine:apply(#{index => 1}, {commit, Transaction, {[], [], []}}, InitState),

    {InitState, {error, {transaction_committed, Transaction}}, []} =
        mnevis_machine:apply(none, {Command, Transaction, Args}, InitState).

% DOWN from a monitor:
%     create a new locker

down_creates_new_locker_test() ->
    InitState = init_state(),
    #state{locker = {_, LockerPid} = Locker} = InitState,
    NewState = InitState#state{locker_status = down},
    {NewState, ok,
     [{mod_call, mnevis_lock_proc, start_new_locker, [Locker]}]} =
       mnevis_machine:apply(none, {down, LockerPid, reason}, InitState).

down_ignores_not_current_locker_test() ->
    InitState = init_state(),
    NotCurrentLocker = spawn(fun() -> ok end),
    {InitState, ok, []} =
       mnevis_machine:apply(none, {down, NotCurrentLocker, reason}, InitState).

% LOCKER UP:
%     record a new locker if higher term
%     reject if lower term

locker_up_registers_same_locker_test() ->
    InitState = init_state(),
    mnevis_lock_proc:create_locker_cache(),
    #state{locker = {_, Pid} = Locker} = InitState,
    LockerDownState = InitState#state{locker_status = down},
    {InitState, confirm, [{monitor, process, Pid}]} =
        mnevis_machine:apply(none, {locker_up, Locker}, InitState),

    {InitState, confirm, [{monitor, process, Pid}]} =
        mnevis_machine:apply(none, {locker_up, Locker}, LockerDownState).

locker_up_registers_higher_term_test() ->
    InitState = init_state(),
    mnevis_lock_proc:create_locker_cache(),
    #state{locker = {Term, _}} = InitState,
    LockerDownState = InitState#state{locker_status = down},

    NewPid = spawn(fun() -> ok end),
    NewTerm = Term + 1,
    NewLocker = {NewTerm, NewPid},

    NewState = InitState#state{locker = NewLocker,
                               locker_status = up},

    {NewState, confirm, [{monitor, process, NewPid}]} =
        mnevis_machine:apply(none, {locker_up, NewLocker}, InitState),

    {NewState, confirm, [{monitor, process, NewPid}]} =
        mnevis_machine:apply(none, {locker_up, NewLocker}, LockerDownState).

locker_up_rejects_lower_term_test() ->
    InitState = init_state(),
    mnevis_lock_proc:create_locker_cache(),
    #state{locker = {Term, _}} = InitState,
    LockerDownState = InitState#state{locker_status = down},

    NewPid = spawn(fun() -> ok end),
    NewTerm = Term - 1,
    NewLocker = {NewTerm, NewPid},

    NewState = InitState#state{locker = NewLocker,
                               locker_status = up},

    {InitState, reject, []} =
        mnevis_machine:apply(none, {locker_up, NewLocker}, InitState),

    {LockerDownState, reject, []} =
        mnevis_machine:apply(none, {locker_up, NewLocker}, LockerDownState).

%% Which locker:
%%     if none - return current locker
%%     if old locker - return current locker
%%     if current locker - start new locker
%%     if higher term - return error

which_locker_none_returns_current_test() ->
    InitState = init_state(),
    #state{locker = Locker} = InitState,
    {InitState, {ok, Locker}, []} =
        mnevis_machine:apply(none, {which_locker, none}, InitState).

which_locker_old_returns_current_test() ->
    InitState = init_state(),
    #state{locker = {Term, _} = Locker} = InitState,

    NewPid = spawn(fun() -> ok end),
    NewTerm = Term + 1,
    NewLocker = {NewTerm, NewPid},

    NewState = InitState#state{locker = NewLocker},

    {NewState, {ok, NewLocker}, []} =
        mnevis_machine:apply(none, {which_locker, Locker}, NewState).

which_locker_current_returns_error_and_effect_test() ->
    InitState = init_state(),
    #state{locker = Locker} = InitState,

    {InitState, {error, locker_up_to_date},
     [{mod_call, mnevis_lock_proc, start_new_locker, [Locker]}]} =
        mnevis_machine:apply(none, {which_locker, Locker}, InitState).

which_locker_newer_error_test() ->
    InitState = init_state(),
    #state{locker = {Term, _} =  Locker} = InitState,

    NewPid = spawn(fun() -> ok end),
    NewTerm = Term + 1,
    NewLocker = {NewTerm, NewPid},

    {InitState, {error, {invalid_locker, NewLocker, Locker}}, []} =
        mnevis_machine:apply(none, {which_locker, NewLocker}, InitState).

-endif.
